""" This program attempts to solve the TSP with the use of A* algorithm
    The heuristic used is a minimum spanning tree, which is generated by Prims algorithm.
    This heurstic helps to minimize the total distance covered.
    Coordinate points are generated at random between 0 and 100. 
    Initital and final states are shown.
    The problem is dynamic and any  number of cities can be given"""

import random
import time


""" Class made to solve TSP"""
class TSP(object):
    def getDistance(self,P1,P2): #Generates distance between 2 points
        self.P1 = P1
        self.P2 = P2
        distance = ((self.P1[0]-self.P2[0])**2 + (self.P1[1]-self.P2[1])**2)**(1/2)
        return distance

    def generateCoordinates(self):
        x = random.randint(0,101)
        y = random.randint(0,101)
        return [x,y]

    def calculateDist(self,s,n): #Calculates the total distance in a state, eg [0,1,2,3]
        self.calD = s
        self.nu = n
        dist = 0
        total = 0
        for i in range(self.nu):
            xi = self.calD[i]
            yj = self.calD[i+1]
            dist = self.getDistance(self.coord[xi],self.coord[yj])
            total+=dist    
        return total
    
    def hue(self,chosenList,cityList): #Generates the total heuristic plus path cost and sends it out
        toCheck = cityList[:]
        SPL = chosenList[:]
        dl = 999999999
        fCost =[]
        l=[]
            
        for i in chosenList:
                toCheck.remove(i)
            
        for e in toCheck:
            l.clear()
            l.append(e)
            rest = cityList[:]
            totalDist = 0
            
            while len(rest) > 0:
                dl=99999
                for i in l:
                    if i in rest:
                        rest.remove(i)
                
                for n in l:
                    for m in rest:
                        d = self.getDistance(self.coord[n],self.coord[m])
                        if d<dl:
                            dl = d
                            c = m
                
                if c not in l:
                    l.append(c)
                    
                totalDist += d
            
            g = self.getDistance(self.coord[e],self.coord[SPL[-1]])
            k = self.getDistance(self.coord['0'],self.coord[e])
            f = g+totalDist+k
            
            #print("f",f)
            #print("h",totalDist)
            #print("E",e)
            fCost.append((f,e))
            
        fCost.sort()

        return (fCost[0][1])

    def solver(self):
        
        number = input("How many cities do you want to generate: ")
        self.coord ={}
        cityList = []
        chosenList = ['0']
        self.number = int(number)
        for i in range(self.number):
            a = str(i)
            l = self.generateCoordinates()
            self.coord[a] = l
            cityList.append(a)
        
        currentState = cityList[:]
                
        for i in range(len(cityList)-1):        
            x = self.hue(chosenList,cityList)
            chosenList.append(x)
        
    
        final = chosenList+['0']
        il = cityList +['0']
        
        fd = self.calculateDist(final,len(final)-1)
        id = self.calculateDist(il,len(il)-1)
        
        print("Coordinates" , self.coord)
        print("Initial state looked like this: ",il,"\n")
        print("Initial distance was %.2f km \n" %id)
        print("Final state looks like this: ",final,"\n" )
        print("Optimized distance is %.2f km \n" %fd)
  
         
def main():
    start = time.time()
    tsp = TSP() 
    tsp.solver()
    end = time.time()
    print("Time measure: %.2f sec" % (end-start))

if __name__ == "__main__":
    main()


'''
OUTPUT
-------

How many cities do you want to generate: 3
Coordinates {'0': [49, 21], '1': [47, 86], '2': [74, 100]}
Initial state looked like this:  ['0', '1', '2', '0'] 

Initial distance was 178.31 km 

Final state looks like this:  ['0', '1', '2', '0'] 

Optimized distance is 178.31 km 

Time measure: 3.31 sec

How many cities do you want to generate: 2
Coordinates {'0': [65, 31], '1': [54, 6]}
Initial state looked like this:  ['0', '1', '0'] 

Initial distance was 54.63 km 

Final state looks like this:  ['0', '1', '0'] 

Optimized distance is 54.63 km 

Time measure: 8.02 sec

'''
